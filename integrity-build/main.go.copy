package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"time"
)

type FileHash struct {
	Path string `json:"path"`
	Hash string `json:"hash"`
}

type DBHash struct {
	Path string `json:"path"`
	Hash string `json:"hash"`
}

func saveDBHash(dbPath string, key []byte) (string, error) {
	hash, err := calculateFileHash(dbPath)
	if err != nil {
		return "", err
	}

	dir := filepath.Dir(dbPath)
	baseName := filepath.Base(dir)
	hashFileName := fmt.Sprintf(".%s.json", baseName)
	hashFilePath := filepath.Join(dir, hashFileName)

	dbHash := DBHash{
		Path: dbPath,
		Hash: hash,
	}

	jsonData, err := json.MarshalIndent(dbHash, "", "  ")
	if err != nil {
		return "", err
	}

	if err := os.WriteFile(hashFilePath, jsonData, 0644); err != nil {
		return "", err
	}

	if err := encryptFile(key, hashFilePath); err != nil {
		return "", err
	}
	return hashFilePath, nil
}

func remountSDA1RW() error {
	cmd := exec.Command("mount", "-o", "remount,rw", "/sda1")
	return cmd.Run()
}

func remountSDA1RO() {
	cmd := exec.Command("mount", "-o", "remount,ro", "/sda1")
	cmd.Run()
}

func extractKeyFromImage(imagePath string) ([]byte, error) {
	tempKeyFile := "extracted_key.txt"
	cmd := exec.Command("steghide", "extract", "-sf", imagePath, "-xf", tempKeyFile, "-p", "Sundyne@123")
	if err := cmd.Run(); err != nil {
		return nil, err
	}
	defer os.Remove(tempKeyFile)

	return os.ReadFile(tempKeyFile)
}

func encryptFile(key []byte, filePath string) error {
	plaintext, err := os.ReadFile(filePath)
	if err != nil {
		return err
	}

	block, err := aes.NewCipher(key)
	if err != nil {
		return err
	}

	gcm, err := cipher.NewGCM(block)
	if err != nil {
		return err
	}

	nonce := make([]byte, gcm.NonceSize())
	if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
		return err
	}

	ciphertext := gcm.Seal(nonce, nonce, plaintext, nil)
	return os.WriteFile(filePath, ciphertext, 0644)
}

func calculateFileHash(filePath string) (string, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return "", err
	}
	defer file.Close()

	hash := sha256.New()
	if _, err := io.Copy(hash, file); err != nil {
		return "", err
	}

	return hex.EncodeToString(hash.Sum(nil)), nil
}

func scanAndSaveHashes(rootPath string) error {
	var fileHashes []FileHash

	err := filepath.Walk(rootPath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() && path != rootPath {
			return filepath.SkipDir
		}
		if !info.IsDir() {
			hash, err := calculateFileHash(path)
			if err != nil {
				return err
			}
			fileHashes = append(fileHashes, FileHash{Path: path, Hash: hash})
		}
		return nil
	})
	if err != nil {
		return err
	}

	dbPath := filepath.Join(rootPath, ".db.json")
	_ = os.Remove(dbPath)

	jsonData, err := json.MarshalIndent(fileHashes, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(dbPath, jsonData, 0644)
}

func createFlagFile() error {
	flagFilePath := "/data/.inxstatus"
	flagContent := fmt.Sprintf("Timestamp: %s\nSystem Info: %s\n", time.Now().Format(time.RFC3339), os.Getenv("HOSTNAME"))
	return os.WriteFile(flagFilePath, []byte(flagContent), 0644)
}

func flagExists() bool {
	_, err := os.Stat("/data/.inxstatus")
	return err == nil
}

func main() {
	if flagExists() {
		fmt.Println("Flag file detected. Integrity check already completed. Exiting.")
		return
	}

	if err := remountSDA1RW(); err != nil {
		fmt.Println("Error remounting /sda1:", err)
		remountSDA1RO()
		return
	}
	defer remountSDA1RO()

	imagePath := "/sda1/data/.gems.jpeg"

	// Extract the existing key from the image
	key, err := extractKeyFromImage(imagePath)
	if err != nil {
		fmt.Println("Error extracting key from image:", err)
		return
	}

	directories := []string{
		"/sda1/data/apps/",
		"/sda1/data/basic/",
		"/sda1/data/core/",
		"/sda1/boot/",
	}

	// Channel to collect errors from goroutines
	type Result struct {
		Dir string
		Err error
	}
	resultChan := make(chan Result, len(directories))

	// Semaphore to limit concurrency (e.g., 2 concurrent tasks)
	sem := make(chan struct{}, 2)

	// Process each directory in parallel
	for _, dir := range directories {
		go func(dir string) {
			sem <- struct{}{}        // Acquire semaphore
			defer func() { <-sem }() // Release semaphore

			fmt.Printf("Processing directory: %s (in parallel)\n", dir)

			// Step 1: Scan and save hashes
			if err := scanAndSaveHashes(dir); err != nil {
				resultChan <- Result{Dir: dir, Err: fmt.Errorf("error scanning %s: %v", dir, err)}
				return
			}

			// Step 2: Encrypt .db.json
			dbPath := filepath.Join(dir, ".db.json")
			if err := encryptFile(key, dbPath); err != nil {
				resultChan <- Result{Dir: dir, Err: fmt.Errorf("error encrypting %s: %v", dbPath, err)}
				return
			}

			// Step 3: Save and encrypt hash file
			hashFilePath, err := saveDBHash(dbPath, key)
			if err != nil {
				resultChan <- Result{Dir: dir, Err: fmt.Errorf("error saving/encrypting hash file for %s: %v", dbPath, err)}
				return
			}

			resultChan <- Result{Dir: dir, Err: nil}
			fmt.Printf("Successfully created and encrypted %s\n", hashFilePath)
		}(dir)
	}

	// Collect results
	success := true
	for i := 0; i < len(directories); i++ {
		res := <-resultChan
		if res.Err != nil {
			fmt.Println(res.Err)
			success = false
		}
	}
	close(resultChan)

	if success {
		fmt.Println("All directories processed successfully")
		createFlagFile()
	} else {
		fmt.Println("Some directories failed to process")
	}
}
